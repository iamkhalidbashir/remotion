/// <reference types="react" />
import { LooseAnyComponent } from './any-component';
import { CompProps } from './Composition';
import { CompositionManagerContext, RenderAssetInfo, TAsset, TCompMetadata, TComposition, TSequence } from './CompositionManager';
import * as Logging from './config/log';
import { WebpackOverrideFn } from './config/override-webpack';
import { ProResProfile } from './config/prores-profile';
import * as CSSUtils from './default-css';
import { RemotionEnvironment } from './get-environment';
import * as perf from './perf';
import * as Timeline from './timeline-position-state';
import { SetTimelineContextValue, TimelineContextValue } from './timeline-position-state';
import { truthy } from './truthy';
import { MediaVolumeContextValue, SetMediaVolumeContextValue } from './volume-position-state';
import { useRemotionContexts } from './wrap-remotion-context';
export declare const Internals: {
    perf: typeof perf;
    useUnsafeVideoConfig: () => import("./video-config").VideoConfig | null;
    Timeline: typeof Timeline;
    CompositionManager: import("react").Context<CompositionManagerContext>;
    RemotionRoot: import("react").FC<{}>;
    useVideo: () => TComposition<unknown> | null;
    getRoot: () => import("react").FC<{}> | null;
    getBrowserExecutable: () => import("./config/browser-executable").BrowserExecutable;
    getCompositionName: () => string | null;
    getIsEvaluation: () => boolean;
    getPixelFormat: () => "yuv420p" | "yuva420p" | "yuv422p" | "yuv444p" | "yuv420p10le" | "yuv422p10le" | "yuv444p10le" | "yuva444p10le";
    getConcurrency: () => number | null;
    getConcurrentMode: () => "tab" | "browser";
    getParallelEncoding: () => boolean;
    getRange: () => import("./config/frame-range").FrameRange | null;
    getShouldOverwrite: () => boolean;
    getOutputCodecOrUndefined: () => import("./config/codec").CodecOrUndefined;
    getWebpackOverrideFn: () => WebpackOverrideFn;
    getQuality: () => number | undefined;
    getShouldOutputImageSequence: (frameRange: import("./config/frame-range").FrameRange | null) => boolean;
    validateSelectedCrfAndCodecCombination: (crf: number, codec: "h264" | "h265" | "vp8" | "vp9" | "mp3" | "aac" | "wav" | "prores" | "h264-mkv") => void;
    getFinalOutputCodec: ({ codec: inputCodec, fileExtension, emitWarning, }: {
        codec: import("./config/codec").CodecOrUndefined;
        fileExtension: string | null;
        emitWarning: boolean;
    }) => "h264" | "h265" | "vp8" | "vp9" | "mp3" | "aac" | "wav" | "prores" | "h264-mkv";
    useMediaVolumeState: () => readonly [number, (u: number) => void];
    useMediaMutedState: () => readonly [boolean, (u: import("react").SetStateAction<boolean>) => void];
    DEFAULT_CODEC: "h264" | "h265" | "vp8" | "vp9" | "mp3" | "aac" | "wav" | "prores" | "h264-mkv";
    DEFAULT_PIXEL_FORMAT: "yuv420p" | "yuva420p" | "yuv422p" | "yuv444p" | "yuv420p10le" | "yuv422p10le" | "yuv444p10le" | "yuva444p10le";
    FEATURE_FLAG_FIREFOX_SUPPORT: boolean;
    DEFAULT_WEBPACK_CACHE_ENABLED: boolean;
    getBrowser: () => import("./config/browser").Browser | null;
    DEFAULT_BROWSER: import("./config/browser").Browser;
    getDefaultCrfForCodec: (codec: "h264" | "h265" | "vp8" | "vp9" | "mp3" | "aac" | "wav" | "prores" | "h264-mkv") => number;
    getActualCrf: (codec: "h264" | "h265" | "vp8" | "vp9" | "mp3" | "aac" | "wav" | "prores" | "h264-mkv") => number;
    setFrameRangeFromCli: (newFrameRange: string | number) => void;
    getUserPreferredImageFormat: () => "none" | "png" | "jpeg" | undefined;
    validateSelectedPixelFormatAndImageFormatCombination: (pixelFormat: "yuv420p" | "yuva420p" | "yuv422p" | "yuv444p" | "yuv420p10le" | "yuv422p10le" | "yuv444p10le" | "yuva444p10le", imageFormat: "none" | "png" | "jpeg") => "none" | "valid";
    validateSelectedPixelFormatAndCodecCombination: (pixelFormat: "yuv420p" | "yuva420p" | "yuv422p" | "yuv444p" | "yuv420p10le" | "yuv422p10le" | "yuv444p10le" | "yuva444p10le", codec: "h264" | "h265" | "vp8" | "vp9" | "mp3" | "aac" | "wav" | "prores" | "h264-mkv") => void;
    validateFrameRange: (frameRange: import("./config/frame-range").FrameRange | null) => void;
    validateNonNullImageFormat: (imageFormat: "none" | "png" | "jpeg") => void;
    getWebpackCaching: () => boolean;
    useLazyComponent: <T>(compProps: CompProps<T>) => import("react").LazyExoticComponent<LooseAnyComponent<T>>;
    truthy: typeof truthy;
    isAudioCodec: (codec: "h264" | "h265" | "vp8" | "vp9" | "mp3" | "aac" | "wav" | "prores" | "h264-mkv" | undefined) => boolean;
    INPUT_PROPS_KEY: string;
    Logging: typeof Logging;
    SequenceContext: import("react").Context<import("./sequencing").SequenceContextType | null>;
    useRemotionContexts: typeof useRemotionContexts;
    RemotionContextProvider: (props: import("./wrap-remotion-context").RemotionContextProviderProps) => JSX.Element;
    isPlainIndex: () => boolean;
    CSSUtils: typeof CSSUtils;
    setupEnvVariables: () => void;
    setupInitialFrame: () => void;
    ENV_VARIABLES_ENV_NAME: "ENV_VARIABLES";
    ENV_VARIABLES_LOCAL_STORAGE_KEY: string;
    INITIAL_FRAME_LOCAL_STORAGE_KEY: string;
    getDotEnvLocation: () => string | null;
    getServerPort: () => number | undefined;
    MediaVolumeContext: import("react").Context<MediaVolumeContextValue>;
    SetMediaVolumeContext: import("react").Context<SetMediaVolumeContextValue>;
    validateDurationInFrames: (durationInFrames: number, component: string) => void;
    validateFps: (fps: number, location: string) => void;
    validateDimension: (amount: number, nameOfProp: string, location: string) => void;
    getRemotionEnvironment: () => RemotionEnvironment;
    getProResProfile: () => "light" | "4444-xq" | "4444" | "hq" | "standard" | "proxy" | undefined;
    setProResProfile: (profile: "light" | "4444-xq" | "4444" | "hq" | "standard" | "proxy" | undefined) => void;
    validateSelectedCodecAndProResCombination: (actualCodec: "h264" | "h265" | "vp8" | "vp9" | "mp3" | "aac" | "wav" | "prores" | "h264-mkv", actualProResProfile: "light" | "4444-xq" | "4444" | "hq" | "standard" | "proxy" | undefined) => void;
    getMaxTimelineTracks: () => number;
    SharedAudioContext: import("react").Context<{
        registerAudio: (aud: import("./audio").RemotionAudioProps) => {
            id: number;
            props: import("./audio").RemotionAudioProps;
            el: import("react").RefObject<HTMLAudioElement>;
        };
        unregisterAudio: (id: number) => void;
        updateAudio: (id: number, aud: import("./audio").RemotionAudioProps) => void;
        playAllAudios: () => void;
        numberOfAudioTags: number;
    } | null>;
    SharedAudioContextProvider: import("react").FC<{
        numberOfAudioTags: number;
    }>;
    validateQuality: (q: number | undefined) => void;
    validateFrame: (frame: number, durationInFrames: number) => void;
    setStillFrame: (frame: number) => void;
    getStillFrame: () => number;
};
export type { TComposition, Timeline, TCompMetadata, TSequence, WebpackOverrideFn, TAsset, RenderAssetInfo, TimelineContextValue, SetTimelineContextValue, CompProps, CompositionManagerContext, MediaVolumeContextValue, SetMediaVolumeContextValue, LooseAnyComponent, RemotionEnvironment, ProResProfile, };
//# sourceMappingURL=internals.d.ts.map